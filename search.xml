<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的吐槽</title>
      <link href="/2021/10/25/self/"/>
      <url>/2021/10/25/self/</url>
      
        <content type="html"><![CDATA[<p>密码学</p>]]></content>
      
      
      <categories>
          
          <category> 小记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学初学</title>
      <link href="/2021/10/23/cryptography/"/>
      <url>/2021/10/23/cryptography/</url>
      
        <content type="html"><![CDATA[<blockquote><p>研0阶段，本科SE专业没有密码学相关基础，所以借着这些空闲时间补一补</p></blockquote><h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><h2 id="流密码（Stream-ciphers）"><a href="#流密码（Stream-ciphers）" class="headerlink" title="流密码（Stream ciphers）"></a>流密码（Stream ciphers）</h2><p>如果一个密码是完美安全的，其全体密码数，不少于其能处理的明文数。SC不是完美加密的算法，它依赖于特定的伪随机生成器（PRG）。</p><h3 id="相关应用"><a href="#相关应用" class="headerlink" title="相关应用"></a>相关应用</h3><ul><li><p><code>RC4</code>:种子大小可变<br>在https中和WEP中使用（WEP中使用不当）<br>缺点：<br>  1.输出字节概率不均匀<br>  2.（0，0）出现的概率更大<br>  3.密钥之间关联性大<br><img src="/assets/mdPic/rc4.png" alt="RC4密钥生成过程"></p></li><li><p><code>CSS</code>（混淆系统）：用于加密硬盘<br>使用LFSR</p></li><li><p><code>eStream -- Sa|sa20</code>：面向硬件和软件<br>可以重复使用密钥K，多了Nonce（新鲜值）</p></li></ul><h3 id="PRG"><a href="#PRG" class="headerlink" title="PRG"></a>PRG</h3><p>One-Time-Pad 是完美的加密算法，但是由于密钥和明文长度需要相同，导致实用性不高，所以使用伪随机的方法用少量的字符产生大量的密钥，其依赖于特定的伪随机生成器（PRG）。PRG需要是不可预测的</p><ul><li>语义安全</li></ul><h2 id="分组密码（Block-ciphers）"><a href="#分组密码（Block-ciphers）" class="headerlink" title="分组密码（Block ciphers）"></a>分组密码（Block ciphers）</h2><p>满足以下性质：</p><ul><li>输入和输出的空间是一致的${\lbrace 0,1 \rbrace}^{n}$</li><li>算法是确定的</li><li>对于每个加密算法$E(k,m)$而言，都存在一个逆过程$D(k,m)$</li></ul><h3 id="伪随机函数（PRF）"><a href="#伪随机函数（PRF）" class="headerlink" title="伪随机函数（PRF）"></a>伪随机函数（PRF）</h3><blockquote><p>PRF(Pseudo Random Function)是组成PRG(Pseudo-Random-Generator)的一部分 </p><blockquote><p>PRG是具有内部状态的伪随机函数。每次运行它时，它都会通过 PRF 运行状态，给出输出，然后使用另一个 PRF 更新状态。它是伪随机的，因为如果你用相同的内部状态重新初始化它，你最终会得到与之前相同的输出序列。与 PRP 不同，PRF 不需要输入空间之间的一对一映射和输出空间 </p></blockquote></blockquote><p>而PRP(Pseudo Random Permutation)与PRF的区别就在于前者是双射的,PRP是PRF的一种特殊的形式，其中满足$X=Y$和能够做逆变换。如果伪随机函数(PRF)是安全的，那么它就应该和真正随机函数是不可分辨的。按照现在攻击者的算力，大概率无法辨认这两种函数，便称为不可辨认性。同理，PRP也是如此。</p><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><h4 id="Feistel网络"><a href="#Feistel网络" class="headerlink" title="Feistel网络"></a>Feistel网络</h4><ul><li>Feistel Network的逆函数和本身是一样的结构，Luby-Rackoff在85年的时候就证明了只要有三轮Feistel Network结构，便可以构建一个安全的PRP<br><img src="/assets/mdPic/fei.png" alt="Feistel机制"><br><img src="/assets/mdPic/feini.png" alt="Feistel求逆"></li></ul><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><p>AES为分组密码，分组密码也就是把明文分成一组一组的，每组长度相等，每次加密一组数据，直到加密完整个明文。</p><h4 id="Subs-Perm-网络"><a href="#Subs-Perm-网络" class="headerlink" title="Subs-Perm 网络"></a>Subs-Perm 网络</h4><p><img src="/assets/mdPic/aes.png" alt="网络结构"><br>AES的加密公式为$C = E(K,P)$，在加密函数E中，会执行一个轮函数，并且执行10次这个轮函数，这个轮函数的前9次执行的操作是一样的，只有第10次有所不同。也就是说，一个明文分组会被加密10轮。AES的核心就是实现一轮中的所有操作<br><img src="/assets/mdPic/aes128.png" alt="AES-128加密细节"><br>其中，在ByteSub部分，采用的是查找表的方式，目的是为了减少加密过程中的复杂计算时间。<br><img src="/assets/mdPic/aesr.png" alt="每轮的操作"></p><ul><li><p>字节代换：通过查表(S盒)进行变换</p><table><thead><tr><th align="center">行/列</th><th align="center">0</th><th align="center">1</th><th align="center">…</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0x52</td><td align="center">0x6a</td><td align="center">…</td></tr><tr><td align="center">1</td><td align="center">0x54</td><td align="center">0x39</td><td align="center">…</td></tr><tr><td align="center">…</td><td align="center">0x08</td><td align="center">0xd0</td><td align="center">…</td></tr></tbody></table></li><li><p>行移位<br>是一个简单的左循环移位操作。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节</p></li><li><p>列混合<br>通过矩阵相乘来实现的，经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵</p></li></ul><h3 id="相关应用-1"><a href="#相关应用-1" class="headerlink" title="相关应用"></a>相关应用</h3><h4 id="一次性密钥-One-Time-Key"><a href="#一次性密钥-One-Time-Key" class="headerlink" title="一次性密钥(One Time Key)"></a>一次性密钥(One Time Key)</h4><p>ECB(Electronic Code Book)不是语义安全的,它会导致在明文相等的值映射到密文也一样相等。<br>安全的构建方法(Deterministic Counter Mode)为了避免ECB的错误加密方式，在处理每一组消息时，我们都会用一个唯一的PRF来进行加密。</p><h4 id="多次密钥-many-time-Key"><a href="#多次密钥-many-time-Key" class="headerlink" title="多次密钥(many-time Key)"></a>多次密钥(many-time Key)</h4><p>明文攻击(chosen-plaintext attack CPA)：攻击者将明文给目标，目标返回相应密文，破解语义安全<br>解决方法：</p><ul><li><p>随机加密<br>将明文$m_0$映射到球里的随机一个点(字符串)，当解密时找到这个点所属的球再映射到明文$m_0$<br>这样加密同一条信息会得到不同的密文<br><img src="/assets/mdPic/random.png" alt="映射图示"></p></li><li><p>增加新鲜值(Nonce)<br>有三个输入密钥$k$，明文$m$，新鲜值$n$。二元对(${k,n}$)只能用来加密一个明文<br>使用方法：<br>➡计数：HTTPS协议中数据包按顺序发收的，所以它们有共同的计数器，这种情况不再需要传递<code>Nonce</code>；但是再IP协议中数据包乱序的，这种情况<code>Nonce</code>需要包含在数据包里传输了<br>➡随机：要求<code>Nonce Space</code>足够大，才能保证不会重复的几率很高</p></li><li><p>密码分组链接模式(CBC)<br>需要保证$IV$($initial vector$)是不可预测的才是安全的<br><img src="/assets/mdPic/cbc.png" alt="具有随机IV的CBC"></p><blockquote><p>nonce-based CBC:<br>两个密钥$K,K_1$，其中一个密钥用来配合非随机$nonce$加密$IV$</p></blockquote></li><li><p>随机计数器模式(CTR)<br>CRT加密方案可以并行处理，而CBC的方案只能串行处理<br><img src="/assets/mdPic/crt.png" alt="具有随机IV的CRT"></p><blockquote><p>Nonce CRT-Mode:<br>在这里，$IV$前64bits是随机数，而后64bits是计数器（对于每个消息而言，从0开始计数），因为64位的计数器的限制，方案如果加密超过了$2^{64}$个消息，就会出现重复使用相同$nonce$的问题</p></blockquote></li></ul><h4 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h4><p>一个加密模式要么有随机初始值，要么就用Nonce来达到语义安全</p><h2 id="信息完整性-Message-integrity"><a href="#信息完整性-Message-integrity" class="headerlink" title="信息完整性(Message integrity)"></a>信息完整性(Message integrity)</h2><p>基本的机制：$MAC$（$Message Authentication Code$）<br>需要共享密钥$k$，假如不使用密钥而选择$tag$←$CRC(m)$，$V(m,tag)$，这样攻击者可以劫持信息然后再自己发送一条出去，接收者也会认为是正确的而且是认定的发送者发出来的。</p><ul><li>$MAC$签名算法：$tag←S(k,m)$</li><li>$MAC$验证算法：$V(k,m,t)$ = “$yes$” or “$no$”</li></ul><h3 id="MAC系统的安全性定义"><a href="#MAC系统的安全性定义" class="headerlink" title="MAC系统的安全性定义"></a>MAC系统的安全性定义</h3><ul><li>攻击者进行<code>选择信息攻击(chosen message attack)</code>，达到<code>存在性伪造(existential forgery)</code>的目的,也就是产生一些新的信息标签对，如果攻击者能达到这个目的那么这个系统就是不安全的，反之安全。</li></ul><h3 id="相关应用-2"><a href="#相关应用-2" class="headerlink" title="相关应用"></a>相关应用</h3><h4 id="安全的PRF→安全的MAC"><a href="#安全的PRF→安全的MAC" class="headerlink" title="安全的PRF→安全的MAC"></a>安全的PRF→安全的MAC</h4><p>$F:K × X → Y$，发送方$tag←F(k,m)$，接收方验证$if$ $tag=F(k,m)$就接收,只有当F输出位数比较少时会有危险,经验来说，只要结果空间大于$2^{80}$，我们就可以说它是安全的</p><blockquote><p>一个安全的$PRF$截断之后还是安全的</p></blockquote><p>将$Small-MAC$ 转换成 $Big-MAC$？</p><h4 id="CBC-MAC"><a href="#CBC-MAC" class="headerlink" title="CBC-MAC"></a>CBC-MAC</h4><p><img src="/assets/mdPic/cbcmac.png" alt="CBC-MAC/ECBC"></p><ul><li>允许输入的信息包含的分组数可变,每个分组的长度与底层PRF的分组长度一致</li><li>如果没有最后一个加密步骤的这个函数称为<code>rowCBC</code></li><li>如果没有最后一个加密，针对它的攻击：首先第一次攻击给一个分组大小信息$m$,根据方程$rawCBC(k,m)=F(k,m)$ 得出$t$，第二次攻击在$m$基础上填充$t \oplus m$，也就是信息$(m,t \oplus m)$，根据公式$rowCBC(k,(m,t \oplus m))=F(k,F(k,m) \oplus (t \oplus m))=F(k,t \oplus (t \oplus m))=t$，可以得到新的信息标签对$((m||t \oplus m),t)$</li></ul><h4 id="NMAC"><a href="#NMAC" class="headerlink" title="NMAC"></a>NMAC</h4><p>将密钥和第一个分组输入产生下一个密钥，进行迭代。<br><img src="/assets/mdPic/nmac.png" alt="NMAC"></p><ul><li>在$t$之前的整个过程称为<code>级联函数(Cascade Function)</code>，所以级联函数输出的是一个$k$，它不是一个安全的MAC</li><li>$fpad$是固定的补齐，因为一般情况下密钥长度都会远小于$PRF$分组长度$|X|$</li><li>最后一步是加密，如果没有这一步就可以再加一级$m[5]$通过函数$F$得到新结果$K_{new}$，产生新的信息标签对$(m||m[5],k_{new})$，根据安全性定义得出不安全。<blockquote><p>这种扩展攻击是针对级联的唯一一种攻击</p></blockquote></li></ul><h3 id="MAC-padding"><a href="#MAC-padding" class="headerlink" title="MAC padding"></a>MAC padding</h3><h4 id="CBC-MAC-padding"><a href="#CBC-MAC-padding" class="headerlink" title="CBC MAC padding"></a>CBC MAC padding</h4><p>补齐函数需要满足$m1 \ne m2$  $\Rightarrow$  $pad(m1) \ne pad(m2)$<br>ISO标准：</p><ul><li>在后面加”1000….00”来补齐</li><li>如果信息已经是整数倍分组了，还是要增加一个1000…的分组</li></ul><h4 id="CMAC-NIST-standard"><a href="#CMAC-NIST-standard" class="headerlink" title="CMAC (NIST standard)"></a>CMAC (NIST standard)</h4><p>与CBC-MAC区别在于它有三个密钥$key=(k,k_1,k_2)$，后两者是由$k$推出来的</p><ul><li>没有最后的加密步骤，取而代之的是最后和$k_1$或$k_2$异或</li><li>区分了是整数组还是非整数组的情况，用$k_1$和$k_2$分别代表，所以整数组不用额外增加分组了<blockquote><p>使用AES作为底层函数</p></blockquote></li></ul><h3 id="并行MAC-Parallel-MAC"><a href="#并行MAC-Parallel-MAC" class="headerlink" title="并行MAC(Parallel MAC)"></a>并行MAC(Parallel MAC)</h3><h4 id="PMAC-parallel-MAC"><a href="#PMAC-parallel-MAC" class="headerlink" title="PMAC-parallel MAC"></a>PMAC-parallel MAC</h4><p><img src="/assets/mdPic/pmac.png" alt="PMAC"></p><ul><li>函数$P$主要作用是保持顺序，因为是并行的如果没有$P$那么交换顺序得出结果也是一样的</li><li>当$F$是$PRP$时改变某一信息可以快速计算出新$tag$<br>如：当$m[0]→ m^{`}[0]$时，只需要做运算$F^{-1}(k_1,tag) \oplus F(k_1,m[0] \oplus p(k,0)) \oplus F(k1,m^{‘}[0] \oplus p(k,0))$ 得出新$tag$</li></ul><h3 id="One-time-MAC"><a href="#One-time-MAC" class="headerlink" title="One-time MAC"></a>One-time MAC</h3><p>比使用PRF的MAC更快，使用一次的情况下是安全的</p><ul><li>$One-time MAC → Many-time MAC$<blockquote><p>Carter-Wegman MAC</p></blockquote></li></ul><h2 id="抗碰撞-Collision-resistance"><a href="#抗碰撞-Collision-resistance" class="headerlink" title="抗碰撞(Collision resistance)"></a>抗碰撞(Collision resistance)</h2><h3 id="生日悖论"><a href="#生日悖论" class="headerlink" title="生日悖论"></a>生日悖论</h3><p>令$E(n)$表示人数为n时两人生日相同的概率<br>$$ E(n)=\prod^{n-1}_{i=1}\left ( 1-\frac i {365} \right ) \ $$</p><p>由平均值不等式：<br>$$ E(n)=\sqrt[n-1] {\prod_{i=1}^{n-1}\left (1- \frac i {365} \right )} &lt; {\frac 1 {n-1}} \sum^{n-1}_{i=1} \left (1- \frac i {365} \right ) \ $$</p><p>去根号得：<br>$$ \prod_{i=1}^{n-1}\left (1- \frac i {365} \right ) &lt; \left( {\frac 1 {n-1}} \sum^{n-1}_{i=1} \left (1- \frac i {365} \right )\right)^{n-1} \ $$</p><p>注意到等式左右满足等差数列性质：<br>$$ \left( {\frac 1 {n-1}} \sum^{n-1}_{i=1} \left (1- \frac i {365} \right )\right)^{n-1} = \left(1-\frac n {730}\right)^{n-1} \ $$</p><p>由泰勒展开的等阶无穷小推论 $ \left(e^x&gt;1+x\right) \Longleftrightarrow (e^{-x}&gt;1-x) \ $ 可知：<br>$$ \left(1-\frac n {730}\right)^{n-1} \lt \left(e^{-n/730}\right)^{n-1} = e^{-(n^2-n)/730} \ $$</p><p>当 $ n^2-n&gt;730\log_e2 \cong 506…$ 时<br>$$n=23$$</p><blockquote><p>在均匀分布的情况下，$n=1.2×B^{\frac 1 2} $ 碰撞的概率 $ \ge \frac 1 2 $,在生日中$B=365$</p></blockquote><h3 id="Merkle-Damgard-Paradigm"><a href="#Merkle-Damgard-Paradigm" class="headerlink" title="Merkle-Damgard Paradigm"></a>Merkle-Damgard Paradigm</h3><p>因为所需的安全散列长度越来越长，因此我们可以使用有限定义域上的散列函数（俗称压缩函数）通过迭代方式拓展为具有无限定义域的散列函数。而最为代表性的就Merkle-Damgard结构<br><img src="/assets/mdPic/mdic.png" alt="MD iterated construction"></p><blockquote><p>定理:只要h满足抗碰撞(collision resistance)，那么H也会满足抗碰撞的条件</p></blockquote><p>如果最后分组是完整的那么就加一个假分组（1000…|| mes len）</p><h3 id="压缩函数-Constructing-Compression-Functions"><a href="#压缩函数-Constructing-Compression-Functions" class="headerlink" title="压缩函数(Constructing Compression Functions)"></a>压缩函数(Constructing Compression Functions)</h3><h4 id="由分组密码构建"><a href="#由分组密码构建" class="headerlink" title="由分组密码构建"></a>由分组密码构建</h4><ul><li><code>Davies-Meyer</code><br>$h(H,m)=E(m,H) \oplus H $其中$E$是加密函数<br><img src="/assets/mdPic/dm.png" alt="Davies-Meyer"></li></ul><blockquote><p>定理：E是理想的分组密码的假设下，找到这个压缩函数H的碰撞需要$O(2^{\frac n 2})$的时间</p></blockquote><ul><li><code>Miyaguchi-Preneel</code></li></ul><h5 id="SHA-256"><a href="#SHA-256" class="headerlink" title="SHA-256"></a>SHA-256</h5><p><img src="/assets/mdPic/sha256.png" alt="SHA-256"></p><ul><li>使用<code>Merkle Damgard function</code></li><li><code>Daview-Meyer</code>压缩函数</li><li>底层使用<code>SHACAL-2</code>（分组密码）</li></ul><h4 id="由数论里的困难问题构建"><a href="#由数论里的困难问题构建" class="headerlink" title="由数论里的困难问题构建"></a>由数论里的困难问题构建</h4><p>$………..$</p><h3 id="HMAC-Hash-MAC"><a href="#HMAC-Hash-MAC" class="headerlink" title="HMAC(Hash-MAC)"></a>HMAC(Hash-MAC)</h3><p>$S(k,m)=H(k \oplus opad,H(k \oplus ipad||m))$</p><blockquote><p>ipad（内部密码本），opad外部密码本</p></blockquote><p><img src="/assets/mdPic/hmac.png" alt="HMAC"><br>使用哈希函数而不使用PRF构建MAC</p><ul><li>与NMAC的区别<br>两个$K$与内外密码本异或作为输入它们之间是<code>依赖</code>的，然后产 生的对应$NMAC$的$K_1,K_2$也是相关联的</li></ul><h4 id="对HMAC的计时攻击"><a href="#对HMAC的计时攻击" class="headerlink" title="对HMAC的计时攻击"></a>对HMAC的计时攻击</h4><p>对于HMAC的验证时对tag逐个字节判断,当第一次出现不同时跳出循环<br>所以攻击者固定信息,改变tag</p><ul><li>第一步:随机tag请求,测量返回时间</li><li>根据返回时间判断是第几个字节错误的,这样一直判断</li></ul><p>应对:</p><ul><li>先判断tag字节数是否正确,固定检查时间，让攻击者无法进行攻击；缺点在于，优化过的编译器可能会忽略这个过程，还是会有运行时间的差距</li><li>不对两个目标值进行进行比较，而是通过间接的方式:再hash一次</li></ul><h2 id="认证加密-Authenticated-Encryption"><a href="#认证加密-Authenticated-Encryption" class="headerlink" title="认证加密(Authenticated Encryption)"></a>认证加密(Authenticated Encryption)</h2><p>主动攻击可以完全破坏CPA<br>认证加密(AE)：满足在CAP攻击下安全&amp;&amp;信息完整<br>不能阻止<code>重放攻击</code><br>验证加密的本质是在选择密文攻击的基础上的安全保证</p><h3 id="选择密文攻击-Chosen-Ciphertext-Attack"><a href="#选择密文攻击-Chosen-Ciphertext-Attack" class="headerlink" title="选择密文攻击(Chosen Ciphertext Attack)"></a>选择密文攻击(Chosen Ciphertext Attack)</h3><p>CPA指的是攻击者可以针对任何消息，从而获取对应的密文;而CCA指的是攻击者可以针对任何密文，获取对应的明文;</p><h3 id="MAC与加密算法的组合"><a href="#MAC与加密算法的组合" class="headerlink" title="MAC与加密算法的组合"></a>MAC与加密算法的组合</h3><p><img src="/assets/mdPic/cbmac.png" alt="Combining MAC and ENC"><br>我们称第一种方案为 mac-then-enc,第二种为 enc-then-mac，第三种为 enc-and-mac.</p><ul><li>IPSec采用的方案是绝对安全的</li><li>SSH的会泄露消息的具体信息（因为是根据m计算出来的tag）</li><li>SSL则因为MAC和ENC结合性的问题，也会出现对应的问题</li></ul><p>常用的标准方法</p><ul><li>GCM(Galois计数器模式 NIST) ：CTR + CW-MAC</li><li>CCM(CBC计数器模式 NIST) ：CBC-MAC + CTR  被WIFI（802.11i）所使用</li><li>EAX ：CTR + CMAC</li></ul><blockquote><p>以上的模式都是基于<code>Nonce</code>的，不使用任何随机性；这些模式被称为AEAD，也就是部分信息加密，所有信息被认证(MAC)的，如一般<code>header</code>不会加密</p></blockquote><p>GCM是相对更快的，但有更大的代码量，在一般的智能卡里面不太好实现</p><h4 id="OCB：由PRP构建的认证加密机制"><a href="#OCB：由PRP构建的认证加密机制" class="headerlink" title="OCB：由PRP构建的认证加密机制"></a>OCB：由PRP构建的认证加密机制</h4><p>只需对每个分组计算PRP一次<br>$……$</p><h3 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h3><ul><li><code>padding oracle attack</code></li><li><code>timing attack</code></li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="Key-Derivation"><a href="#Key-Derivation" class="headerlink" title="Key Derivation"></a>Key Derivation</h3><p>通过<em>Source Key</em> 产生许多满足伪随机性质的<em>keys</em>.<br>当<em>Source Key</em> 是安全PRF产生的<strong>均匀</strong>随机密钥，我们可以直接用KDF(密钥推导函数)生成密钥来保证会话安全<br>$$ KDF(SK,CTX,L):=F(SK,(CTX||0)) || F(SK,(CTX||1)) || ….. || F(SK,(CTX||L)) $$</p><blockquote><p><code>CTX</code>(上下文字符)： 用来分离各个进程，比如SSh，网页服务器和IPsec它们都从硬件的随机数发生器获得了同样的原密钥，由于CTX不一样可以确保它们可以获得独立的密钥来保护会话安全</p></blockquote><p>当$Source Key$是<strong>非均匀</strong>的时候<br>采取 <code>Extract-then-Expand</code></p><ul><li>1.将不均匀的SK通过提取变成均匀的(与真随机不可区分)<br><img src="/assets/mdPic/erandom.png" alt="提取"></li><li>2.扩展到需要的位数</li></ul><p>不是均匀分布的常见原因：</p><ul><li><em>Source key</em>经常不是随机分布的，比如在key exchange protocol中，key值只在K的一个子集中均匀分布</li><li>在<em>hardware RNG</em>中，它可能会输出带有偏置的输出结果.</li></ul><h4 id="HKDF-a-KDF-from-HAMC"><a href="#HKDF-a-KDF-from-HAMC" class="headerlink" title="HKDF(a KDF from HAMC)"></a>HKDF(a KDF from HAMC)</h4><p>使用$k←HMAC(salt，SK)$来提取均匀的密钥，再使用<em>HMAC</em>作为<em>PRF</em>扩展</p><h4 id="PBKDF-Password-Based-KDF"><a href="#PBKDF-Password-Based-KDF" class="headerlink" title="PBKDF(Password-Based KDF)"></a>PBKDF(Password-Based KDF)</h4><p>$H^{(c)}(pwd||salt)$：循环$c$次$H$</p><h3 id="确定性加密-Deterministic-Encryption"><a href="#确定性加密-Deterministic-Encryption" class="headerlink" title="确定性加密(Deterministic Encryption)"></a>确定性加密(Deterministic Encryption)</h3><p>加密系统总是把给定的明文映射到同一密文,适用于明文符合随机或者每次请求的明文唯一的情况(<code>数据库索引</code>)，概况来说就是用不同的$pair(k,m)$加密每一个消息. 这样的话，它就具有$CPA$安全<br>固定$IV$的情况下$CBC$以及$CRT$都是$CPA$不安全的</p><h3 id="SIV-and-wide-PRP"><a href="#SIV-and-wide-PRP" class="headerlink" title="SIV and wide PRP"></a>SIV and wide PRP</h3><h4 id="Synthetic-IV-合成IV"><a href="#Synthetic-IV-合成IV" class="headerlink" title="Synthetic IV(合成IV)"></a>Synthetic IV(合成IV)</h4><p>$$<br>E_{det}((k1,k2),m) =<br>\begin{cases}<br>r←F(k_1,m) &amp;&amp;\<br>c←E(k_2,m,r)<br>\end{cases}<br>$$</p><blockquote><p>定理：$E_{det}$在确定的选择明文攻击下是$CPA$安全的<br>适合大于一个AES分组的信息</p></blockquote><ul><li><code>SIV-CTR(随机IV)</code><br>$DAE：$确定性的认证加密$(deterministic \ authenticated \ encryption)$<br>在不使用<code>MAC</code>的情况下保证了信息完整性<br><img src="/assets/mdPic/siv.png" alt="SIV加密"><br><img src="/assets/mdPic/dsiv.png" alt="SIV解密"><br>$IV$是由$PRF$根据明文得出来的，解密时会将解密的明文再用$PRF$来验证$IV$是否改变，如果信息被改动那么解密的$IV$和输入的$IV$不一样，这样就可以判断是否被改动，可以提供完整性</li></ul><blockquote><p>定理：如果F是安全的PRF，计数器模式下是由CPA安全的F_ctr推出的，这样得到的就是确定性的认证加密系统</p></blockquote><h4 id="只使用PRP"><a href="#只使用PRP" class="headerlink" title="只使用PRP"></a>只使用PRP</h4><ul><li><p>EME<br>$……$</p></li><li><p>在信息后面附0，解密的时候有足够的0那么可以作为完整性检测，提供了确定的认证加密</p></li></ul><h3 id="微调加密-Tweakable-encryption"><a href="#微调加密-Tweakable-encryption" class="headerlink" title="微调加密(Tweakable encryption)"></a>微调加密(Tweakable encryption)</h3><p>目标是硬盘加密需要不扩展的加密</p><blockquote><p>引理：一个确定的CPA安全的密码，它的明文空间等于密文空间，那么这实际上是PRP</p></blockquote><h4 id="Tweakable-block-ciphers"><a href="#Tweakable-block-ciphers" class="headerlink" title="Tweakable block ciphers"></a>Tweakable block ciphers</h4><p>$$E,D:K×T×X→X$$  $T \in$ 微调空间</p><h5 id="Trivial-Construction"><a href="#Trivial-Construction" class="headerlink" title="Trivial Construction"></a>Trivial Construction</h5><p><img src="/assets/mdPic/tc.png" alt="TC"></p><h5 id="XTS-tweakable-block-ciphers"><a href="#XTS-tweakable-block-ciphers" class="headerlink" title="XTS tweakable block ciphers"></a>XTS tweakable block ciphers</h5><p><img src="/assets/mdPic/xts.png" alt="XTS"></p><h3 id="保格式加密-Format-Preserving-Encryption"><a href="#保格式加密-Format-Preserving-Encryption" class="headerlink" title="保格式加密(Format Preserving Encryption)"></a>保格式加密(Format Preserving Encryption)</h3><p>常用于<code>加密信用卡</code>，也就是加密后的密文看上去还是信用卡格式<br>具体加密算法，后续进一步学习（<strong>学累了</strong>）<br><img src="/assets/mdPic/fpe1.png" alt="FPE"><br><img src="/assets/mdPic/fpe2.png" alt="FPE"></p><h2 id="密钥交换-Basic-key-exchange"><a href="#密钥交换-Basic-key-exchange" class="headerlink" title="密钥交换(Basic key exchange)"></a>密钥交换(Basic key exchange)</h2><p>在线可信任三方(Online Trusted $3^{rd}$ Party TTP)：每个用户可与可信任第三方共享一个单独的密钥</p><h3 id="初级协议-a-toy-protocol"><a href="#初级协议-a-toy-protocol" class="headerlink" title="初级协议(a toy protocol)"></a>初级协议(a toy protocol)</h3><ul><li><p>对于监听是安全的</p></li><li><p>A与B想通信，首先A让TTP知道这个意图，然后TTP生成共享密钥，发送用A的密钥$K_A$加密的信息和ticket给A，然后A将$ticket$给B，双方用自己的密钥解密之后得到共享密钥</p></li><li><p>TTP需要参与到每个密钥交换，也知道所有的会话密钥<br><img src="/assets/mdPic/atp.png"></p></li><li><p>在主动攻击下不安全，<code>重放攻击</code></p></li></ul><h3 id="不需要TTP的情况下交换密钥"><a href="#不需要TTP的情况下交换密钥" class="headerlink" title="不需要TTP的情况下交换密钥"></a>不需要TTP的情况下交换密钥</h3><p>不需要<em>TTP</em>参与的方法：<br><code>公钥密码学</code>：<em>Merkle(1974)，Diffie-Hellman(1976)，RSA(1977)，ID-base enc.(BF2001)基于身份的加密，Functional enc.(2011)泛函加密</em></p><p>使用对称密码的方法：</p><h4 id="Merkle-Puzzles"><a href="#Merkle-Puzzles" class="headerlink" title="Merkle Puzzles"></a>Merkle Puzzles</h4><p><code>Alice</code></p><ul><li>首先Alice需要准备n个密钥，每个密钥只有n位有效，具体就是生成n个$p_i \in {0,1}^{n}$，这样就有n个密钥$(0^{128-n}||pi)$</li><li>$x_i,k_i \in {0,1}^{128}$，Alice 开始生成Puzzle，具体是$Puzzle←E(0^{128-n}||p_i,”Puzzle#x_i”||k_i)$</li><li>将生成的Puzzle发送给Bob</li></ul><p><code>Bob</code></p><ul><li>收到n条Alice发送的Puzzle之后，随机选一条，用$O(n)$的时间去解密Puzzle，得到$(x_i,k_i)$，保存好$k_i$</li><li>发送$x_i$给Alice</li></ul><p><code>Alice</code></p><ul><li>收到Bob的$x_i$之后，查Puzzle数据库，找到对应的$k_i$，这就是它们共享的密钥。</li></ul><p><code>Attacker</code></p><ul><li>窃听者想要获取共享密钥需要从n个Puzzle里面用$O(n)$的时间去解密，所以花费的时间是$O(n^{2})$，所以Alice需要发送n=64以上才是安全的，这也是这个方法最不实用的地方。<br>参与者与攻击者之间有<code>quadratic gap（平方鸿沟）</code>，这基本上是对称密码能做到最好的成绩了，也由此开始了公钥密码<br><img src="/assets/mdPic/puz.png" alt="Merkle Puzzle"></li></ul><h3 id="The-Diffie-Hellman-protocol"><a href="#The-Diffie-Hellman-protocol" class="headerlink" title="The Diffie-Hellman protocol"></a>The Diffie-Hellman protocol</h3><p><img src="/assets/mdPic/dh.png" alt="Diffie-Hellman(参考图解密码技术)"></p><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>攻击者能够得到的参数有：$p,g,A=g^{a}(mod p),B=g^{b}(mod p)$<br>双方的共享密钥是：$g^{ab}$<br>所以攻击者能够在得到的参数里面解出$g^{ab}$吗，也就是找到一个函数$DH_g(g^{a},g^{b})=g^{ab}$<br>目前最好的一个算法计算Diffie-Hellman函数的是的是<code>GNFS(普通数域筛法)</code>耗时大约是$e^{O(\sqrt[3]n)}$ </p><h5 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h5><p><img src="/assets/mdPic/mm.png" alt="中间人攻击"></p><h4 id="非互动建立"><a href="#非互动建立" class="headerlink" title="非互动建立"></a>非互动建立</h4><p>双方(n=2)建立通信不用互相通信，每个人只需要把自己的$g^i$暴露出来，只要两个人$i,j$想通信就可以计算出它们的共享密钥$g^{ij}$<br>也就是想要达到非互动建立</p><ul><li>n=2，DH协议可以实现</li><li>n=3,已知协议khown,由Joux提出</li><li>n=4，开放问题，未解决</li></ul><h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><ul><li>费马小定理</li><li>生成元</li><li>拉格朗日定理</li><li>欧拉定理</li></ul><h3 id="模二次方程-Modular-e’th-roots"><a href="#模二次方程-Modular-e’th-roots" class="headerlink" title="模二次方程(Modular e’th roots)"></a>模二次方程(Modular e’th roots)</h3><p>e与p-1互质时，e次方根总是存在的<br><img src="/assets/mdPic/easyc.png" alt="简单的情况"><br>计算奇质数模的平方根会有二次剩余，1是二次剩余</p><ul><li><p>二次剩余<br><img src="/assets/mdPic/er.png" alt="欧拉提出"></p></li><li><p>计算质数模的平方根<br><img src="/assets/mdPic/cpu.png"></p></li><li><p><code>Karatsuba</code>算法减少了乘法需要的时间</p></li><li><p>重复平方算法</p></li></ul><h3 id="困难问题"><a href="#困难问题" class="headerlink" title="困难问题"></a>困难问题</h3><p>这些数论里面的难题可以应用到密码学里面，这样就没法破解了</p><ul><li>离散对数问题，由此衍生的密码算法（<code>Diffie-Hellman</code>,<code>椭圆曲线</code>）,抗碰撞也是其应用</li><li>合数分解成质因数<br><img src="/assets/mdPic/amc.png" alt="合数模的一些性质"></li></ul><h2 id="公钥加密-Public-key-encryption"><a href="#公钥加密-Public-key-encryption" class="headerlink" title="公钥加密(Public key encryption)"></a>公钥加密(Public key encryption)</h2><ul><li><code>选择密文安全 CCA(Chosen ciphertext security)</code>:攻击者有能力解密任何它想解密的密文（挑战密文除外），它依然不能学到挑战密文是什么</li></ul><h3 id="CCA安全的公钥系统"><a href="#CCA安全的公钥系统" class="headerlink" title="CCA安全的公钥系统"></a>CCA安全的公钥系统</h3><h4 id="陷门置换-Trapdoor-permutation"><a href="#陷门置换-Trapdoor-permutation" class="headerlink" title="陷门置换(Trapdoor permutation)"></a>陷门置换(Trapdoor permutation)</h4><ul><li><p>陷门置换与陷门函数区别<br>前者（x→x）包括陷门函数（x→y），体现就是$F()$与$F^{-1}()$，陷门置换还包括密钥生成G()</p></li><li><p><code>Trapdoor function(TDF)</code><br><img src="/assets/mdPic/tdf.png" alt="TDF"></p><blockquote><p>安全的陷门函数是攻击者求不出F函数的逆，也就是正向计算这个函数容易，但不能从反方向计算(除非有私钥SK)</p></blockquote></li><li><p>基于TDF的公钥系统（ISO标准）<br>公钥系统中TDF负责映射随机值x，而认证加密用于明文，其中认证加密的密钥是由x哈希后产生的，然后将TDF将x加密传输。</p><blockquote><p>只要H()是随机的，对称加密机制提供了认证加密，陷门置换是安全的，那么称这个系统是CCA安全的</p></blockquote></li></ul><p><img src="/assets/mdPic/tdfs.png" alt="基于TDF的公钥加密"></p><blockquote><p>不要使用TDF直接加密明文，这是不安全的。</p></blockquote><h4 id="RSA-经典的TDF"><a href="#RSA-经典的TDF" class="headerlink" title="RSA(经典的TDF)"></a>RSA(经典的TDF)</h4><p>被广泛应用在SSL/TLS，邮件，文件系统等<br>密钥生成算法G()：</p><ul><li>随机生成两个质数p，q，每个大约1000位，RSA模N=pq；</li><li>选择两个数e，d，且e·d=1(mod $\Phi (N) $)，这就意味这它们都需要和$\Phi (N) $互质，且互为$\Phi (N) $的逆</li><li>输出公钥pk=(N,e)，私钥sk=(N,d)<blockquote><p>e：加密指数；d：解密指数</p></blockquote></li></ul><p>RSA函数本身：<br><img src="/assets/mdPic/rsa.png" alt="RSA"></p><p>Textbook RSA是不安全的，也就是直接使用RSA加密明文是不安全的(为什么称为Textbook RSA，因为很多教科书就是这样使用的。。。。<em>整个无语住了</em>)<br><img src="/assets/mdPic/atrsa.png" alt="对TestbookRSA的攻击"></p>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/22/hello-world/"/>
      <url>/2021/10/22/hello-world/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>. </p></blockquote><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
