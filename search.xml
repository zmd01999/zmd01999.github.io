<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的吐槽</title>
      <link href="/2021/10/25/self/"/>
      <url>/2021/10/25/self/</url>
      
        <content type="html"><![CDATA[<p>密码学</p>]]></content>
      
      
      <categories>
          
          <category> 小记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学初学</title>
      <link href="/2021/10/23/cryptography/"/>
      <url>/2021/10/23/cryptography/</url>
      
        <content type="html"><![CDATA[<blockquote><p>研0阶段，本科SE专业没有密码学相关基础，所以借着这些空闲时间补一补</p></blockquote><h2 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h2><h2 id="流密码（Stream-ciphers）"><a href="#流密码（Stream-ciphers）" class="headerlink" title="流密码（Stream ciphers）"></a>流密码（Stream ciphers）</h2><p>如果一个密码是完美安全的，其全体密码数，不少于其能处理的明文数。SC不是完美加密的算法，它依赖于特定的伪随机生成器（PRG）。</p><h3 id="相关应用"><a href="#相关应用" class="headerlink" title="相关应用"></a>相关应用</h3><ul><li><p><code>RC4</code>:种子大小可变<br>在https中和WEP中使用（WEP中使用不当）<br>缺点：<br>  1.输出字节概率不均匀<br>  2.（0，0）出现的概率更大<br>  3.密钥之间关联性大<br><img src="/assets/mdPic/rc4.png" alt="RC4密钥生成过程"></p></li><li><p><code>CSS</code>（混淆系统）：用于加密硬盘<br>使用LFSR</p></li><li><p><code>eStream -- Sa|sa20</code>：面向硬件和软件<br>可以重复使用密钥K，多了Nonce（新鲜值）</p></li></ul><h3 id="PRG"><a href="#PRG" class="headerlink" title="PRG"></a>PRG</h3><p>One-Time-Pad 是完美的加密算法，但是由于密钥和明文长度需要相同，导致实用性不高，所以使用伪随机的方法用少量的字符产生大量的密钥，其依赖于特定的伪随机生成器（PRG）。PRG需要是不可预测的</p><ul><li>语义安全</li></ul><h2 id="分组密码（Block-ciphers）"><a href="#分组密码（Block-ciphers）" class="headerlink" title="分组密码（Block ciphers）"></a>分组密码（Block ciphers）</h2><p>满足以下性质：</p><ul><li>输入和输出的空间是一致的${\lbrace 0,1 \rbrace}^{n}$</li><li>算法是确定的</li><li>对于每个加密算法$E(k,m)$而言，都存在一个逆过程$D(k,m)$</li></ul><h3 id="伪随机函数（PRF）"><a href="#伪随机函数（PRF）" class="headerlink" title="伪随机函数（PRF）"></a>伪随机函数（PRF）</h3><blockquote><p>PRF(Pseudo Random Function)是组成PRG(Pseudo-Random-Generator)的一部分 </p><blockquote><p>PRG是具有内部状态的伪随机函数。每次运行它时，它都会通过 PRF 运行状态，给出输出，然后使用另一个 PRF 更新状态。它是伪随机的，因为如果你用相同的内部状态重新初始化它，你最终会得到与之前相同的输出序列。与 PRP 不同，PRF 不需要输入空间之间的一对一映射和输出空间 </p></blockquote></blockquote><p>而PRP(Pseudo Random Permutation)与PRF的区别就在于前者是双射的,PRP是PRF的一种特殊的形式，其中满足$X=Y$和能够做逆变换。如果伪随机函数(PRF)是安全的，那么它就应该和真正随机函数是不可分辨的。按照现在攻击者的算力，大概率无法辨认这两种函数，便称为不可辨认性。同理，PRP也是如此。</p><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><h4 id="Feistel网络"><a href="#Feistel网络" class="headerlink" title="Feistel网络"></a>Feistel网络</h4><ul><li>Feistel Network的逆函数和本身是一样的结构，Luby-Rackoff在85年的时候就证明了只要有三轮Feistel Network结构，便可以构建一个安全的PRP<br><img src="/assets/mdPic/fei.png" alt="Feistel机制"><br><img src="/assets/mdPic/feini.png" alt="Feistel求逆"></li></ul><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><p>AES为分组密码，分组密码也就是把明文分成一组一组的，每组长度相等，每次加密一组数据，直到加密完整个明文。</p><h4 id="Subs-Perm-网络"><a href="#Subs-Perm-网络" class="headerlink" title="Subs-Perm 网络"></a>Subs-Perm 网络</h4><p><img src="/assets/mdPic/aes.png" alt="网络结构"><br>AES的加密公式为$C = E(K,P)$，在加密函数E中，会执行一个轮函数，并且执行10次这个轮函数，这个轮函数的前9次执行的操作是一样的，只有第10次有所不同。也就是说，一个明文分组会被加密10轮。AES的核心就是实现一轮中的所有操作<br><img src="/assets/mdPic/aes128.png" alt="AES-128加密细节"><br>其中，在ByteSub部分，采用的是查找表的方式，目的是为了减少加密过程中的复杂计算时间。<br><img src="/assets/mdPic/aesr.png" alt="每轮的操作"></p><ul><li><p>字节代换：通过查表(S盒)进行变换</p><table><thead><tr><th align="center">行/列</th><th align="center">0</th><th align="center">1</th><th align="center">…</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0x52</td><td align="center">0x6a</td><td align="center">…</td></tr><tr><td align="center">1</td><td align="center">0x54</td><td align="center">0x39</td><td align="center">…</td></tr><tr><td align="center">…</td><td align="center">0x08</td><td align="center">0xd0</td><td align="center">…</td></tr></tbody></table></li><li><p>行移位<br>是一个简单的左循环移位操作。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节</p></li><li><p>列混合<br>通过矩阵相乘来实现的，经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵</p></li></ul><h3 id="相关应用-1"><a href="#相关应用-1" class="headerlink" title="相关应用"></a>相关应用</h3><h4 id="一次性密钥-One-Time-Key"><a href="#一次性密钥-One-Time-Key" class="headerlink" title="一次性密钥(One Time Key)"></a>一次性密钥(One Time Key)</h4><p>ECB(Electronic Code Book)不是语义安全的,它会导致在明文相等的值映射到密文也一样相等。<br>安全的构建方法(Deterministic Counter Mode)为了避免ECB的错误加密方式，在处理每一组消息时，我们都会用一个唯一的PRF来进行加密。</p><h4 id="多次密钥-many-time-Key"><a href="#多次密钥-many-time-Key" class="headerlink" title="多次密钥(many-time Key)"></a>多次密钥(many-time Key)</h4><p>明文攻击(chosen-plaintext attack CPA)：攻击者将明文给目标，目标返回相应密文，破解语义安全<br>解决方法：</p><ul><li><p>随机加密<br>将明文$m_0$映射到球里的随机一个点(字符串)，当解密时找到这个点所属的球再映射到明文$m_0$<br>这样加密同一条信息会得到不同的密文<br><img src="/assets/mdPic/random.png" alt="映射图示"></p></li><li><p>增加新鲜值(Nonce)<br>有三个输入密钥$k$，明文$m$，新鲜值$n$。二元对(${k,n}$)只能用来加密一个明文<br>使用方法：<br>➡计数：HTTPS协议中数据包按顺序发收的，所以它们有共同的计数器，这种情况不再需要传递<code>Nonce</code>；但是再IP协议中数据包乱序的，这种情况<code>Nonce</code>需要包含在数据包里传输了<br>➡随机：要求<code>Nonce Space</code>足够大，才能保证不会重复的几率很高</p></li><li><p>密码分组链接模式(CBC)<br>需要保证$IV$($initial vector$)是不可预测的才是安全的<br><img src="/assets/mdPic/cbc.png" alt="具有随机IV的CBC"></p><blockquote><p>nonce-based CBC:<br>两个密钥$K,K_1$，其中一个密钥用来配合非随机$nonce$加密$IV$</p></blockquote></li><li><p>随机计数器模式(CTR)<br>CRT加密方案可以并行处理，而CBC的方案只能串行处理<br><img src="/assets/mdPic/crt.png" alt="具有随机IV的CRT"></p><blockquote><p>Nonce CRT-Mode:<br>在这里，$IV$前64bits是随机数，而后64bits是计数器（对于每个消息而言，从0开始计数），因为64位的计数器的限制，方案如果加密超过了$2^{64}$个消息，就会出现重复使用相同%nonce%的问题</p></blockquote></li></ul><h4 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h4><p>一个加密模式要么有随机初始值，要么就用Nonce来达到语义安全</p><h2 id="信息完整性-Message-integrity"><a href="#信息完整性-Message-integrity" class="headerlink" title="信息完整性(Message integrity)"></a>信息完整性(Message integrity)</h2><p>基本的机制：$MAC$（$Message Authentication Code$）<br>需要共享密钥$k$，假如不使用密钥而选择$tag$←$CRC(m)$，$V(m,tag)$，这样攻击者可以劫持信息然后再自己发送一条出去，接收者也会认为是正确的而且是认定的发送者发出来的。</p><ul><li>$MAC$签名算法：$tag←S(k,m)$</li><li>$MAC$验证算法：$V(k,m,t)$ = “$yes$” or “$no$”</li></ul><h3 id="MAC系统的安全性定义"><a href="#MAC系统的安全性定义" class="headerlink" title="MAC系统的安全性定义"></a>MAC系统的安全性定义</h3><ul><li>攻击者进行<code>选择信息攻击(chosen message attack)</code>，达到<code>存在性伪造(existential forgery)</code>的目的,也就是产生一些新的信息标签对，如果攻击者能达到这个目的那么这个系统就是不安全的，反之安全。</li></ul><h3 id="相关应用-2"><a href="#相关应用-2" class="headerlink" title="相关应用"></a>相关应用</h3><h4 id="安全的PRF→安全的MAC"><a href="#安全的PRF→安全的MAC" class="headerlink" title="安全的PRF→安全的MAC"></a>安全的PRF→安全的MAC</h4><p>$F:K × X → Y$，发送方$tag←F(k,m)$，接收方验证$if$ $tag=F(k,m)$就接收,只有当F输出位数比较少时会有危险,经验来说，只要结果空间大于$2^{80}$，我们就可以说它是安全的</p><blockquote><p>一个安全的$PRF$截断之后还是安全的</p></blockquote><p>将$Small-MAC$ 转换成 $Big-MAC$？</p><h4 id="CBC-MAC"><a href="#CBC-MAC" class="headerlink" title="CBC-MAC"></a>CBC-MAC</h4><p><img src="/assets/mdPic/cbcmac.png" alt="CBC-MAC/ECBC"></p><ul><li>允许输入的信息包含的分组数可变,每个分组的长度与底层PRF的分组长度一致</li><li>如果没有最后一个加密步骤的这个函数称为<code>rowCBC</code></li><li>如果没有最后一个加密，针对它的攻击：首先第一次攻击给一个分组大小信息$m$,根据方程$rawCBC(k,m)=F(k,m)$ 得出$t$，第二次攻击在$m$基础上填充$t \oplus m$，也就是信息$(m,t \oplus m)$，根据公式$rowCBC(k,(m,t \oplus m))=F(k,F(k,m) \oplus (t \oplus m))=F(k,t \oplus (t \oplus m))=t$，可以得到新的信息标签对$((m||t \oplus m),t)$</li></ul><h4 id="NMAC"><a href="#NMAC" class="headerlink" title="NMAC"></a>NMAC</h4><p>将密钥和第一个分组输入产生下一个密钥，进行迭代。<br><img src="/assets/mdPic/nmac.png" alt="NMAC"></p><ul><li>在$t$之前的整个过程称为<code>级联函数(Cascade Function)</code>，所以级联函数输出的是一个$k$，它不是一个安全的MAC</li><li>$fpad$是固定的补齐，因为一般情况下密钥长度都会远小于$PRF$分组长度$|X|$</li><li>最后一步是加密，如果没有这一步就可以再加一级$m[5]$通过函数$F$得到新结果$K_{new}$，产生新的信息标签对$(m||m[5],k_{new})$，根据安全性定义得出不安全。<blockquote><p>这种扩展攻击是针对级联的唯一一种攻击</p></blockquote></li></ul><h3 id="MAC-padding"><a href="#MAC-padding" class="headerlink" title="MAC padding"></a>MAC padding</h3><h4 id="CBC-MAC-padding"><a href="#CBC-MAC-padding" class="headerlink" title="CBC MAC padding"></a>CBC MAC padding</h4><p>补齐函数需要满足$m1 \ne m2$  $\Rightarrow$  $pad(m1) \ne pad(m2)$<br>ISO标准：</p><ul><li>在后面加”1000….00”来补齐</li><li>如果信息已经是整数倍分组了，还是要增加一个1000…的分组</li></ul><h4 id="CMAC-NIST-standard"><a href="#CMAC-NIST-standard" class="headerlink" title="CMAC (NIST standard)"></a>CMAC (NIST standard)</h4><p>与CBC-MAC区别在于它有三个密钥$key=(k,k_1,k_2)$，后两者是由$k$推出来的</p><ul><li>没有最后的加密步骤，取而代之的是最后和$k_1$或$k_2$异或</li><li>区分了是整数组还是非整数组的情况，用$k_1$和$k_2$分别代表，所以整数组不用额外增加分组了<blockquote><p>使用AES作为底层函数</p></blockquote></li></ul><h3 id="并行MAC-Parallel-MAC"><a href="#并行MAC-Parallel-MAC" class="headerlink" title="并行MAC(Parallel MAC)"></a>并行MAC(Parallel MAC)</h3><h4 id="PMAC-parallel-MAC"><a href="#PMAC-parallel-MAC" class="headerlink" title="PMAC-parallel MAC"></a>PMAC-parallel MAC</h4><p><img src="/assets/mdPic/pmac.png" alt="PMAC"></p><ul><li>函数$P$主要作用是保持顺序，因为是并行的如果没有$P$那么交换顺序得出结果也是一样的</li><li>当$F$是$PRP$时改变某一信息可以快速计算出新$tag$<br>如：当$m[0]→ m^{`}[0]$时，只需要做运算$F^{-1}(k_1,tag) \oplus F(k_1,m[0] \oplus p(k,0)) \oplus F(k1,m^{‘}[0] \oplus p(k,0))$ 得出新$tag$</li></ul><h3 id="One-time-MAC"><a href="#One-time-MAC" class="headerlink" title="One-time MAC"></a>One-time MAC</h3><p>比使用PRF的MAC更快，使用一次的情况下是安全的</p><ul><li>$One-time MAC → Many-time MAC$<blockquote><p>Carter-Wegman MAC</p></blockquote></li></ul><h2 id="抗碰撞-Collision-resistance"><a href="#抗碰撞-Collision-resistance" class="headerlink" title="抗碰撞(Collision resistance)"></a>抗碰撞(Collision resistance)</h2><h3 id="生日悖论"><a href="#生日悖论" class="headerlink" title="生日悖论"></a>生日悖论</h3><p>令$E(n)$表示人数为n时两人生日相同的概率<br>$$ E(n)=\prod^{n-1}_{i=1}\left ( 1-\frac i {365} \right ) \ $$</p><p>由平均值不等式：<br>$$ E(n)=\sqrt[n-1] {\prod_{i=1}^{n-1}\left (1- \frac i {365} \right )} &lt; {\frac 1 {n-1}} \sum^{n-1}_{i=1} \left (1- \frac i {365} \right ) \ $$</p><p>去根号得：<br>$$ \prod_{i=1}^{n-1}\left (1- \frac i {365} \right ) &lt; \left( {\frac 1 {n-1}} \sum^{n-1}_{i=1} \left (1- \frac i {365} \right )\right)^{n-1} \ $$</p><p>注意到等式左右满足等差数列性质：<br>$$ \left( {\frac 1 {n-1}} \sum^{n-1}_{i=1} \left (1- \frac i {365} \right )\right)^{n-1} = \left(1-\frac n {730}\right)^{n-1} \ $$</p><p>由泰勒展开的等阶无穷小推论 $ \left(e^x&gt;1+x\right) \Longleftrightarrow (e^{-x}&gt;1-x) \ $ 可知：<br>$$ \left(1-\frac n {730}\right)^{n-1} \lt \left(e^{-n/730}\right)^{n-1} = e^{-(n^2-n)/730} \ $$</p><p>当 $ n^2-n&gt;730\log_e2 \cong 506…$ 时<br>$$n=23$$</p><blockquote><p>在均匀分布的情况下，$n=1.2×B^{\frac 1 2} $ 碰撞的概率 $ \ge \frac 1 2 $,在生日中$B=365$</p></blockquote><h3 id="Merkle-Damgard-Paradigm"><a href="#Merkle-Damgard-Paradigm" class="headerlink" title="Merkle-Damgard Paradigm"></a>Merkle-Damgard Paradigm</h3><p><img src="/assets/mdPic/mdic.png" alt="MD iterated construction"></p><blockquote><p>定理:只要h满足抗碰撞(collision resistance)，那么H也会满足抗碰撞的条件</p></blockquote><h3 id="压缩函数-Constructing-Compression-Functions"><a href="#压缩函数-Constructing-Compression-Functions" class="headerlink" title="压缩函数(Constructing Compression Functions)"></a>压缩函数(Constructing Compression Functions)</h3><h4 id="由分组密码构建"><a href="#由分组密码构建" class="headerlink" title="由分组密码构建"></a>由分组密码构建</h4><ul><li><p><code>Davies-Meyer</code></p></li><li><p><code>Miyaguchi-Preneel</code></p></li></ul><h5 id="SHA-256"><a href="#SHA-256" class="headerlink" title="SHA-256"></a>SHA-256</h5><ul><li>使用<code>Merkle Damgard function</code></li><li><code>Daview-Meyer</code>压缩函数</li><li>底层使用<code>SHACAL-2</code>（分组密码）</li></ul><h4 id="由数论里的困难问题构建"><a href="#由数论里的困难问题构建" class="headerlink" title="由数论里的困难问题构建"></a>由数论里的困难问题构建</h4><h3 id="HMAC-Hash-MAC"><a href="#HMAC-Hash-MAC" class="headerlink" title="HMAC(Hash-MAC)"></a>HMAC(Hash-MAC)</h3><p><img src="/assets/mdPic/hmac.png" alt="HMAC"></p><h4 id="对HMAC的计时攻击"><a href="#对HMAC的计时攻击" class="headerlink" title="对HMAC的计时攻击"></a>对HMAC的计时攻击</h4><p>对于HMAC的验证时对tag逐个字节判断,当第一次出现不同时跳出循环<br>所以攻击者固定信息,改变tag</p><ul><li>第一步:随机tag请求,测量返回时间</li><li>根据返回时间判断是第几个字节错误的,这样一直判断</li></ul><p>应对:</p><ul><li>先判断tag字节数是否正确,固定检查时间，让攻击者无法进行攻击；缺点在于，优化过的编译器可能会忽略这个过程，还是会有运行时间的差距</li><li>不对两个目标值进行进行比较，而是通过间接的方式:再hash一次</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/22/hello-world/"/>
      <url>/2021/10/22/hello-world/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>. </p></blockquote><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
